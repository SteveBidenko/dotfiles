#!/bin/bash

#ARROW=`echo -e "\ue0b0 "`
ARROW=`echo -e "\ue0bc"`
HOUSE=`echo -e "\u2302"`
case $(tty) in /dev/tty[0-9]*)
    ARROW=''; HOUSE='' ;;
esac



# function is_chroot()
# {
#     [ "$(awk '$5=="/" {print $1}' </proc/1/mountinfo)" != "$(awk '$5=="/" {print $1}' </proc/$$/mountinfo)" ] && return 0 || return 1
# }


function make_prompt() {
    RETCODE=$?
    START=$(echo -en "\uF2D0")
    STAR=$(echo -en "\uF005")
    PULSE=$(echo -en "\uE234")
    #ARROW=$(echo -en "\uE0BC")
    GIT=$(echo -en "\uE725")
    #CODE=$(echo -en "\uF054")
    CODE=$(echo -en "\uE285")
    ROOT=$(echo -en "\uE614")
    LAST_BACK=""
    LAST_FORE=255
    LAST_FORE_MOD=0

    function fb() {
        FORE=$1
        BACK=$2
        FORE_MOD=${3:-0}
        if [[ "$LAST_BACK" != "" && "$LAST_BACK" != "$BACK" ]]
        then
            echo -n "\[\e[48;5;${BACK}m\]\[\e[38;5;${LAST_BACK}m\]$ARROW"
        fi
        echo -n "\[\e[$FORE_MOD;38;5;${FORE}m\]"
        echo -n "\[\e[48;5;${BACK}m\]"
        printf -v "LAST_BACK" "$BACK"
        printf -v "LAST_FORE" "$FORE"
        printf -v "LAST_FORE_MOD" "$FORE_MOD"
    }

    function br() {
        printf -v "LAST_BACK" ""
        echo
    }

    #function back() {
        #echo "$LAST_FORE_MOD;38;5;${LAST_FORE}m"
        #echo -n "\[\e[48;5;$1m\]\[\e[$LAST_FORE_MOD;38;5;${LAST_FORE}m\]"
    #}

    RST="\[\e[0m\]"

    function ssh_part() {
        if ! [[ -z "$SSH_CONNECTION" ]]
        then
            fb 0 255
            echo -n " $(hostname) "
        fi
    }

    function date_part() {
        fb 255 125
        date +" $START %H:%M:%S $RST" | tr -d '\n'
    }

    function venv_part() {
        if [[ ! -z "$VIRTUAL_ENV" ]]
        then
            fb 255 22
            #fore 22
            #arrow
            echo -n " "
            echo -en "$VIRTUAL_ENV $RST" | awk -F/ '{print $(NF-1)"/"$NF}' | tr -d '\n'
        elif [[ -f ".env/bin/activate" ]]
        then
            VIRTUAL_ENV=$( . .env/bin/activate; echo $VIRTUAL_ENV )
            fb 255 160
            echo -n " "
            echo -en "$VIRTUAL_ENV $RST" | awk -F/ '{print $(NF-1)"/"$NF}' | tr -d '\n'
        fi
    }

    function git_part() {
        #BRANCH="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD 2>&1) @ $(git rev-parse --short HEAD 2>&1)"
        BRANCH="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD 2>&1)"
        if [[ "$?" -eq "0" ]]
        then
            OUT=$(git status -s 2>&1)
            OIFS=$IFS
            #IFS=$'\n'
            #for line in $(git st -s | sed -re 's/^\s+|\s+$//g')
            #do
                #echo "A${line}B"
            #done
            #IFS=$OIFS
            if [ "$OUT" == "" ]
            then
                fb 255 34  # 28
                C=''
            else
                fb 255 130
                C='!'
            fi
            echo -n " $GIT $BRANCH$C $RST"
        fi
    }

    function ret_part() {
        if [[ "$RETCODE" != "0" ]]
        then
            fb 255 160
            echo -en " $RETCODE $RST"
            echo -en "\[$txtrst\]"
        fi
    }

    function dirs_part() {
        fb 255 31
        DIRS=$(find . -maxdepth 1 ! -path . -type d | wc -l)
        echo -en " \uE5FF $DIRS $RST"
    }

    function files_part() {
        fb 255 28  # 64
        FILES=$(find . -maxdepth 1 -type f -printf "%s\n")
        SIZE=$(echo $FILES | tr ' ' '+' | bc)
        SIZE=${SIZE:-0}
        SIZE=$(numfmt --to=iec-i --suffix=B --format="%.2f" $SIZE | sed -re "s/,00//g;s/([0-9])([A-Z])/\1 \2/g")
        # | tr -d "\n"
        echo -en " \uF15B $(echo $FILES | wc -w) ($SIZE) $RST"
    }

    function free_part() {
        fb 0 71
        echo -n " $(df -h / --output=avail | tail -n 1 | tr -d "\n ")iB free "
    }

    function pwd_part() {
        fb 255 27 1
        if [[ "$PWD" == "/" ]]
        then
            echo -en " / $RST"
        else
            DIR=${PWD/$HOME/ \$HOUSE}
            #DIR=${DIR//\// \\uF44A }
            DIR=${DIR//\// \\uE0BD }
            #DIR=${DIR//\// \\u258F}
            echo -en "${DIR} $RST"
        fi
    }


    function end_part() {
        fb 255
    }

    ssh_part
    date_part
    venv_part
    git_part
    #dirs_part
    #files_part
    #free_part
    ret_part
    end_part
    br
    pwd_part
    end_part
    echo -n "$RST "
}

function set_prompt() {
    #PS1="`info`"
    PS1="`make_prompt`"
    #PS1="`ret=$? /home/anderson/.config/qtile/bin/prompt.sh`"
    #PS1="`ret=$? /home/anderson/.config/qtile/bin/prompt.py`"
    # PS1="$hostname_result\[$bakblu\]\[$bldwht\] \w \[$txtrst\]$info_result "
}

# if [[ "$TTY" == "0" ]]
# then
#     PROMPT_COMMAND=set_prompt
# else
#     PROMPT_COMMAND=simple_prompt
# fi

export PYTHONIOENCODING=utf-8

PROMPT_COMMAND=set_prompt

function tag() {
    export TAG=$1
}

function make_zprompt() {
    ret=$? /home/anderson/.config/qtile/bin/zprompt.py
}

if [[ "$SH" == "zsh" ]]
then
    PS1='$(make_zprompt)'
fi

# PROMPT_COMMAND="~/.config/qtile/bin/prompt.py"
