#!/bin/bash

ARROW=`echo -e "\ue0b0 "`
case $(tty) in /dev/tty[0-9]*)
    ARROW='' ;;
esac
# ARROW=''


# function is_chroot()
# {
#     [ "$(awk '$5=="/" {print $1}' </proc/1/mountinfo)" != "$(awk '$5=="/" {print $1}' </proc/$$/mountinfo)" ] && return 0 || return 1
# }

HOSTNAME_BG_COLOR=$bakgrn
HOSTNAME_FG_COLOR=$txtgrn

function retype_command() {
    which tmux > /dev/null
    if [[ "$TMUX_PANE" != "0" ]]
    then
        tmux send-keys -t $TMUX_PANE "$1"
    fi
}

function info() {
    CODE=$?
    CMD=`fc -ln -0 | sed -re 's/^\s+//g' -e 's/\s+$//g'`
    FIRST=1

    function print_shell_simple() {
        echo "[${USER}@${HOSTNAME} ${PWD/$HOME/\/\~}]$ "
    }

    function print_tag() {
        if [[ ! -z "$TAG" ]]
        then
            echo -en "\[$bld\]\[$bldwht\]\[$bakpur\] "
            echo -n $TAG
            echo -en " \[$txtrst\]\[$txtpur\]"
            printf -v "FIRST" 0
        else
            echo -en "\[$txtgrn\]"
        fi
    }

    function print_virtualenv() {
        if [[ ! -z "$VIRTUAL_ENV" ]]
        then
            echo -en "\[$bld\]\[$bldwht\]\[$bak22\] "
            echo -n $VIRTUAL_ENV | awk -F/ '{print $(NF-1)"/"$NF}' | tr -d '\n'
            echo -en " \[$txtrst\]\[$txt22\]"
            printf -v "FIRST" 0
        elif [[ -f ".env/bin/activate" ]]
        then
            VIRTUAL_ENV=$( . .env/bin/activate; echo $VIRTUAL_ENV )
            echo -en "\[$bld\]\[$bldwht\]\[$bakred\] ! "
            echo -n $VIRTUAL_ENV | awk -F/ '{print $(NF-1)"/"$NF}' | tr -d '\n'
            echo -en " \[$txtrst\]\[$txtred\]"
            printf -v "FIRST" 0
        else
            echo -en "\[$txtgrn\]"
        fi
    }

    function print_hostname() {
        echo -en "\[$bldwht\]"
        if [[ "$UID" -eq "0" ]]
        then
            echo -en "\[$bakred\] \uF071 ${HOSTNAME} "
        else
            echo -en "\[$HOSTNAME_BG_COLOR\] ${HOSTNAME} "
        fi
        # echo -en "\[$txtrst\]"
    }

    function print_pwd() {
        echo -en "\[$bldwht\]"
        echo -en "${PWD/$HOME/\~}"
        # echo -en "\[$txtrst\]"
    }

    function git_info() {
        NAME=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`

        if [[ "$NAME" != "" ]]
        then
            echo -en "\[$txtrst\]\[$HOSTNAME_BG_COLOR\]\[$bldwht\][\[$txtrst\]\[$txtwht\]\[$HOSTNAME_BG_COLOR\]"
            $(git diff --quiet)

            if [[ "$?" != "0" ]]
            then
                echo -en "\[$undwht\]$NAME"
            else
                echo -en "$NAME"
            fi
            echo -en "\[$txtrst\]\[$HOSTNAME_BG_COLOR\]\[$bldwht]\]"
        fi
    }

    function ret_info() {
        PWD=`print_pwd`
        if [[ "$CODE" != "0" ]]
        then
            if [[ "$CODE" != "130" ]]
            then
                echo -en "\[$bakred\] $CODE $PWD \[$txtrst$txtred\]$ARROW"
            else
                echo -en "\[$bakred\] $PWD \[$txtrst$txtred\]$ARROW"
            fi
        else
            echo -en "\[$HOSTNAME_BG_COLOR$bldwht\] $PWD \[$txtrst\]\[$HOSTNAME_FG_COLOR\]$ARROW"
        fi
        echo -en "\[$txtrst\]"
    }

    if [[ "$MC_SID" != "" ]]
    then
        print_shell_simple
    else
        print_tag
        print_virtualenv
        print_hostname
        git_info
        # print_pwd
        ret_info
        # retry

        # echo -en " "

        # if [[ "$TTY" == "0" ]]
        # then
        #     echo -en "\[\e[49m\]$ARROW\[$txtrst\] "
        # else
        #     echo -en
        # fi

        # if [[ "$CODE" != "0" && "$CODE" != "130" ]]
        # then
        #     retype_command "$CMD"
        # fi
    fi

    # PLAIN="[$PWD]"
    # echo -ne "\[\033]0;$PLAIN\007\]"
}

function make_prompt() {
    CODE=$?
    ARROW=$(echo -en "\uE0BC")
    LAST_BACK=""
    LAST_FORE=255
    LAST_FORE_MOD=0

    function fb() {
        FORE=$1
        BACK=$2
        FORE_MOD=${3:-0}
        if [[ "$LAST_BACK" != "" && "$LAST_BACK" != "$BACK" ]]
        then
            echo -n "\[\e[48;5;${BACK}m\]\[\e[38;5;${LAST_BACK}m\]$ARROW"
        fi
        echo -n "\[\e[$FORE_MOD;38;5;${FORE}m\]"
        echo -n "\[\e[48;5;${BACK}m\]"
        printf -v "LAST_BACK" "$BACK"
        printf -v "LAST_FORE" "$FORE"
        printf -v "LAST_FORE_MOD" "$FORE_MOD"
    }

    function br() {
        printf -v "LAST_BACK" ""
        echo
    }

    #function back() {
        #echo "$LAST_FORE_MOD;38;5;${LAST_FORE}m"
        #echo -n "\[\e[48;5;$1m\]\[\e[$LAST_FORE_MOD;38;5;${LAST_FORE}m\]"
    #}

    RST="\[\e[0m\]"

    function date_part() {
        fb 255 125
        date +" %H:%M:%S $RST" | tr -d '\n'
    }

    function venv_part() {
        if [[ ! -z "$VIRTUAL_ENV" ]]
        then
            fb 255 22
            #fore 22
            #arrow
            echo -n " "
            echo -en "$VIRTUAL_ENV $RST" | awk -F/ '{print $(NF-1)"/"$NF}' | tr -d '\n'
        elif [[ -f ".env/bin/activate" ]]
        then
            VIRTUAL_ENV=$( . .env/bin/activate; echo $VIRTUAL_ENV )
            fb 255 160
            echo -n " "
            echo -en "$VIRTUAL_ENV $RST" | awk -F/ '{print $(NF-1)"/"$NF}' | tr -d '\n'
        fi
    }

    function git_part() {
        BRANCH=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD 2>&1)
        if [[ "$?" -eq "0" ]]
        then
            OUT=$(git status -s 2>&1)
            if [ "$OUT" == "" ]
            then
                fb 255 70
            else
                fb 255 130
            fi
            echo -n " $BRANCH $RST"
        fi
    }

    function ret_part() {
        if [[ "$CODE" != "0" ]]
        then
            fb 255 160
            echo -en " $CODE $RST"
            echo -en "\[$txtrst\]"
        fi
    }

    function pwd_part() {
        fb 255 27 1
        echo -en " ${PWD/$HOME/\~} $RST"
    }

    function fs_part() {
        fb 255 92
        FILES=$(find . -maxdepth 1 -type f | wc -l)
        DIRS=$(find . -maxdepth 1 -type d | wc -l)
        echo -en " $FILES \uF15B $DIRS \uE5FF $RST"
    }

    function end_part() {
        fb 255
    }

    date_part
    venv_part
    git_part
    fs_part
    ret_part
    end_part
    br
    pwd_part
    end_part
    echo -n "$RST "
}

function set_prompt() {
    # PS1="`info`"
    PS1="`make_prompt`"
    #PS1="`ret=$? /home/anderson/.config/qtile/bin/prompt.sh`"
    #PS1="`ret=$? /home/anderson/.config/qtile/bin/prompt.py`"
    # PS1="$hostname_result\[$bakblu\]\[$bldwht\] \w \[$txtrst\]$info_result "
}

# if [[ "$TTY" == "0" ]]
# then
#     PROMPT_COMMAND=set_prompt
# else
#     PROMPT_COMMAND=simple_prompt
# fi

export PYTHONIOENCODING=utf-8

PROMPT_COMMAND=set_prompt

function tag() {
    export TAG=$1
}

function make_zprompt() {
    ret=$? /home/anderson/.config/qtile/bin/zprompt.py
}

if [[ "$SH" == "zsh" ]]
then
    PS1='$(make_zprompt)'
fi

# PROMPT_COMMAND="~/.config/qtile/bin/prompt.py"
